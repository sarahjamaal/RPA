// ----------------------------------------------------------------
//   CUSTOMIZED FUNCTIONS
// ----------------------------------------------------------------
function init_RegisterKeys() {
	ctx.setting( {
		"DownPaymentsForSupplier_MailTo": {
			key: ctx.cryptography.keys.none,
			comment: "Email",
			server: false
		}
	});

	ctx.setting( {
		"DownPaymentsForSupplier_OutputDirectory": {
			key: ctx.cryptography.keys.none,
			comment: "Output Directory",
			server: false
		}
	});

	ctx.setting( {
		"DownPaymentsForSupplier_SystemURL": {
			key: ctx.cryptography.keys.none,
			comment: "System URL",
			server: false
		}
	});
}

function setMSRegisterKeyValue(key, value) {
	var entry = ctx.settings[key];
	entry.value = value;
	entry.set(function (code, label, setting) {
		if (code !== e.error.OK) {
			ctx.log("Fail to persist result " + key, e.logIconType.Error);
		}
	});
}
// ----------------------------------------------------------------
//   Test menu for scenario DownPaymentRequestsforSuppliers 
// ----------------------------------------------------------------
GLOBAL.events.START.on(function (ev) {
	if (ctx.options.isDebug) {
		// Add item in systray menu.
		systray.addMenu('', 'DownPaymentRequestsforSuppliers', 'Test DownPaymentRequestsforSuppliers', '', function (ev) {
			var rootData = ctx.dataManagers.rootData.create();
			
			// Initialize your data here.
			init_RegisterKeys();
			
			GLOBAL.scenarios.DownPaymentRequestsforSuppliers.start(rootData);
		});
	}
});

//---------------------------------------------------
// Scenario DownPaymentRequestsforSuppliers Starter ()
//---------------------------------------------------

// ----------------------------------------------------------------
//   Scenario: DownPaymentRequestsforSuppliers
// ----------------------------------------------------------------
GLOBAL.scenario({ DownPaymentRequestsforSuppliers: function(ev, sc) {
	var rootData = sc.data;

	sc.setMode(e.scenario.mode.clearIfRunning);
	sc.setScenarioTimeout(600000); // Default timeout for global scenario.
	sc.onError(function(sc, st, ex) { sc.endScenario(); }); // Default error handler.
	sc.onTimeout(30000, function(sc, st) { sc.endScenario(); }); // Default timeout handler for each step.
	sc.step(GLOBAL.steps.Open_Monitor_Page);
}}, ctx.dataManagers.rootData).setId('46f14be6-3847-4501-93c4-b7a53d9a9a44') ;

// ----------------------------------------------------------------
	// Describe functionality to be implemented in JavaScript later in the project.
	GLOBAL.data.TEMP_REPORT_FOLDER = ctx.options.path.log + "\\TpRpFDir_" + new Date().getTime();
	st.disableTimeout();
	POPUPS.SS.open();
			POPUPS.SS.wait(function(ev) {
				ctx.log("As");
				POPUPS.SS.waitClose(function(ev){
					sc.endStep();
					return;
				});
			});
	
//   Step: Open_Monitor_Page
// ----------------------------------------------------------------
GLOBAL.step({ Open_Monitor_Page: function(ev, sc, st) {
	var rootData = sc.data;
	ctx.workflow('DownPaymentRequestsforSuppliers', 'a3fd0d02-c33d-4da0-82e3-44a2983d61ae') ;
	// Describe functionality to be implemented in JavaScript later in the project.
	sc.endStep(); // end Scenario
	return;
}});
